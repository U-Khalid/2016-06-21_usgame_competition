package cn.usgame.servlet;

import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.ByteArrayOutputStream;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.PrintWriter;
import java.net.URLDecoder;
import java.net.URLEncoder;
import java.sql.SQLException;
import java.util.List;
import java.util.Map;

import javax.servlet.ServletException;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import com.google.gson.JsonArray;
import com.google.gson.JsonObject;

import cn.usgame.entity.ApplyReport;
import cn.usgame.entity.Camp;
import cn.usgame.entity.CampApply;
import cn.usgame.entity.User;
import cn.usgame.entity.camp_comment;
import cn.usgame.entity_dto.ApplyReportForm;
import cn.usgame.entity_dto.campApplyForm;
import cn.usgame.entity.Competition;

import cn.usgame.filter.MyResponseWrapper;
import cn.usgame.filter.MyResquestWrapper;
import cn.usgame.service.CampService;
import cn.usgame.service.ServiceFactory;
import cn.usgame.utils.Excel;

/**
 * Servlet implementation class CampServlet
 */
@WebServlet("/CampServlet")
public class CampServlet extends BaseServlet {
	private static final long serialVersionUID = 1L;
	private CampService campService = ServiceFactory.getInstance().getCampManage();
       
	/**
	 * 
	 * 函数名称：getCampList 功能描述：获取营地列表 参数说明： 返回值：void 备注：
	 * 
	 * 作者：lujinye 时间：2017年2月26日 16:59:06
	 * 
	 * 
	 * @throws SQLException
	 * @throws IOException
	*/
	public void getCampList(MyResquestWrapper request, MyResponseWrapper response) throws SQLException, IOException {
        JsonObject out_json = new JsonObject();
		JsonArray jsonData = new JsonArray(); 
		List<Camp> camps = campService.getCampList();
		if(camps!=null) {
			for(int i = 0;i<camps.size();i++) {
				jsonData.add(camps.get(i).toJSON());
			}
			out_json.add("data",jsonData);
		}
		else {
			out_json.add("data",null);
		}
         PrintWriter out  = response.getWriter();
         out.println(out_json);
         out.flush();
         out.close();
         
	}
	
	
	/**
	 * 
	 * 函数名称：getMainCamp 功能描述：得到首页的营地   参数说明： 返回值：void 备注：
	 * 
	 * 作者：zhangbin 时间：2017年2月28日 20:08:00
	 * 
	 */
	
	public void getMainCamp(MyResquestWrapper request, MyResponseWrapper response) throws IOException {
		JsonObject out_json = new JsonObject();
		JsonArray jsonData = new JsonArray();
		List<Camp> camp = campService.getMainCamp();
		for (int i = 0; i < 4; i++) {
			jsonData.add(camp.get(i).toJSON());
		}
		out_json.add("data", jsonData);
		PrintWriter out = response.getWriter();
		out.println(out_json);
		out.flush();
		out.close();
	}
	
	/**
	 * 
	 * 函数名称：Web_getCampDetails 功能描述：获取营地详情 参数说明： 返回值：void 备注：
	 * 
	 * 作者：zhangbin 时间：2017年3月5日 16:59:33
	 */
	public void Web_getCampDetails(MyResquestWrapper request, MyResponseWrapper response) throws IOException {
		int campId = Integer.parseInt(request.getParameter("CampId"));
		JsonObject out_json = new JsonObject();
			Camp camp = campService.Web_getCampDetails(campId);
			if (camp != null) {
				JsonObject jsonData = new JsonObject();
				jsonData = camp.toJSON();
				out_json.add("data", jsonData);
				out_json.addProperty("msg", true);
			} else {
				out_json.add("data", null);
				out_json.addProperty("msg", false);
			}
			PrintWriter out = response.getWriter();
			out.println(out_json);
			out.flush();
			out.close();
	
	}
	
	/**
	 * 函数名称：payAttention
	 *  功能描述：添加营地关注 
	 *  参数说明：用户注册号，竞赛Id
	 *  返回值：boolean 
	 *  备注：
	 * 
	 * 作者：zhangbin 时间：2017年3月9日 12:26:13
	 * 
	 * @throws SQLException
	 * @throws IOException
	 */
	public void payAttention(MyResquestWrapper request, MyResponseWrapper response) throws SQLException,IOException {
		String phonenumber = request.getParameter("phonenumber");
		String CampId = request.getParameter("CampId");
		boolean result = false;
		result = campService.AddCampAttention(phonenumber,CampId);
		PrintWriter out = response.getWriter();
		out.println(result);
		out.flush();
		out.close();
	}
	
	public void judgeAttentionState(MyResquestWrapper request, MyResponseWrapper response) throws SQLException,IOException {
		String phonenumber = request.getParameter("phonenumber");
		String CampId = request.getParameter("CampId");
		int result;
		result = campService.judgeAttentionState(phonenumber,CampId);
		System.out.println(result);
		PrintWriter out = response.getWriter();
		out.println(result);
		out.flush();
		out.close();
	}
	
	
	/**
	 * 函数名称：DelAttention
	 *  功能描述：取消营地关注 
	 *  参数说明：用户注册号，竞赛Id
	 *  返回值：boolean 
	 *  备注：
	 * 
	 * 作者：zhangbin 时间：2017年3月11日 10:16:01
	 * 
	 * @throws SQLException
	 * @throws IOException
	 */
	public void DelAttention(MyResquestWrapper request, MyResponseWrapper response) throws SQLException,IOException {
		String phonenumber = request.getParameter("phonenumber");
		String CampId = request.getParameter("CampId");
		boolean result = false;
		result = campService.DelCampAttention(phonenumber,CampId);
		PrintWriter out = response.getWriter();
		out.println(result);
		out.flush();
		out.close();
	}
	

	/**
	 * 
	 * 函数名称：apply 功能描述：提交报名申请 参数说明： 返回值：void 备注：msg 1:报名成功 2:用户已经支付过 3:修改报名成功
	 * 4:身份证或手机号错误
	 * 
	 * 作者：zhangbin 时间：2017年3月14日 19:55:58
	 */
	public void apply(MyResquestWrapper request, MyResponseWrapper response) throws IOException {
		Map<String, String[]> map = request.getParameterMap();
		JsonObject out_json = new JsonObject();
		HttpSession session = request.getSession();
		User us = (User) session.getAttribute("user");
		if (us != null) {
			campApplyForm campApplyform = new campApplyForm(map, us.getPhonenumber());
			boolean flagForIdcard = campApplyform.judgeIdcard();
			boolean flagForPhoneNum = campApplyform.judgePhoneNum();
			if (flagForIdcard == true && flagForPhoneNum == true) {
				CampApply campapply = campApplyform.toCampApply();
				int result = campService.campapply(campapply);
				out_json.addProperty("msg", result);
				out_json.addProperty("data", campapply.getOut_trade_no());
				out_json.add("other", null);
			} else {
				if (flagForIdcard == false && flagForPhoneNum == true) {
					out_json.addProperty("other", "身份证号码有误！");
				} else if (flagForPhoneNum == false && flagForIdcard == true) {
					out_json.addProperty("other", "电话号码有误！");
				} else if (flagForPhoneNum == false && flagForIdcard == false) {
					out_json.addProperty("other", "电话号码,身份证有误！");
				}
				out_json.addProperty("msg", 4);
				out_json.add("data", null);
			}
		} else {
			out_json.addProperty("msg", 0);
			out_json.add("data", null);
			out_json.addProperty("other", "请先登陆!");
		}
		PrintWriter out = response.getWriter();
		out.println(out_json);
		out.flush();
		out.close();
	}

	/**
	 * 函数名称：getCampListByForm
	 *  功能描述：获取营地列表 
	 *  参数说明： 
	 *  返回值：void 
	 *  备注：
	 * 
	 * 作者：lujinye 时间：
	 * 
	 * @throws SQLException
	 * @throws IOException
	 */
	public void getCampListByForm(MyResquestWrapper request, MyResponseWrapper response) throws SQLException, IOException {
		String destination = request.getParameter("destination");
		String theme = request.getParameter("theme");
		int suitableAge = Integer.parseInt(request.getParameter("suitableAge"));
		int timeLength = Integer.parseInt(request.getParameter("timeLength"));
		JsonArray jsonData = new JsonArray();
		JsonObject out_json = new JsonObject();
		List<Camp> camps = campService.getCampListByForm(destination,theme,suitableAge,timeLength);
		for (int i = 0; i < camps.size(); i++) {
			jsonData.add(camps.get(i).toJSON());
		}
		PrintWriter out = response.getWriter();
			out_json.add("data", jsonData);
		out.println(out_json);
		out.flush();
		out.close();
	}
	
	/**
	 * 函数名称：getCampSearchInfo
	 *  功能描述：
	 *  参数说明：搜索内容
	 *  返回值： 
	 *  备注：
	 * 
	 * 作者：lujinye 时间：2017年2月21日10:10:04
	 * 
	 * @throws SQLException
	 * @throws IOException
	 */
	public void getCampSearchInfo(MyResquestWrapper request, MyResponseWrapper response) throws SQLException,IOException {
		String searchInfo = request.getParameter("searchInfo");
		JsonArray jsonData = new JsonArray();
		JsonObject out_json = new JsonObject();
		List<Camp> camps= campService.getCampSearchInfo(searchInfo);
		if(camps.size()>0){
			for(int i=0;i<camps.size();i++){
				jsonData.add(camps.get(i).toJSON());
			}
			out_json.add("data", jsonData);
			out_json.addProperty("msg", true);
		}
		else {
			out_json.add("data", null);
			out_json.addProperty("msg", false);
		}
		PrintWriter out = response.getWriter();
		out.println(out_json);
		out.flush();
		out.close();
	}
	
	
	/**
	 * 函数名称：judgeApplyState 功能描述：判断订单状态   参数说明： out_trade_no 订单号 返回值：订单状态  备注：
	 * 
	 * 作者：zhangbin 时间：2017年3月22日 12:39:34
	 * 
	 * @throws SQLException
	 * @throws IOException
	 */
	public void judgeApplyState(MyResquestWrapper request, MyResponseWrapper response) throws SQLException, IOException {
		String out_trade_no = request.getParameter("out_trade_no");
		JsonObject out_json = new JsonObject();
		int state = campService.judgeApplyState(out_trade_no);
		PrintWriter out = response.getWriter();
		out_json.addProperty("state", state);
		out.println(out_json);
		out.flush();
		out.close();
	}
	/**
	 * 函数名称：list 功能描述：后台获取营地列表 参数说明： 返回值：void 备注：
	 * 
	 * 作者：lujinye 时间：2016年7月3日下午2:34:30
	 * 
	 * @throws SQLException
	 * @throws IOException
	 */
	public void list(MyResquestWrapper request, MyResponseWrapper response) throws SQLException, IOException {
		int type = Integer.parseInt(request.getParameter("type"));
		int page = 0;
		if (type == 1) {
			page = Integer.parseInt(request.getParameter("page"));
		}
		JsonArray jsonData = new JsonArray();
		JsonObject out_json = new JsonObject();
		List<Camp> camps = campService.getCampList(page);
		for (int i = 0; i < camps.size(); i++) {
			jsonData.add(camps.get(i).admin_toJSON());
			
		}
		String num = campService.getCampNum();
		// EasyUI json格式
		PrintWriter out = response.getWriter();
		if (type == 1) {
			out_json.addProperty("total", num);
			out_json.add("rows", jsonData);
		} else {
			out_json.addProperty("total", camps.size());
			out_json.add("data", jsonData);
		}
		out.println(out_json);
		out.flush();
		out.close();
	}

	/**
	 * 
	 * 函数名称：reviseCampState 功能描述：修改营地状态 参数说明： * 返回值：void 备注：
	 * 
	 * 作者：lujinye 时间：2017年3月24日16:30:47
	 * 
	 * @throws IOException
	 */
	public void reviseCampState(MyResquestWrapper request, MyResponseWrapper response) throws IOException {
		int campId = Integer.parseInt(request.getParameter("campId"));
		int campstate = Integer.parseInt(request.getParameter("campstate"));
		JsonObject out_json = new JsonObject();
		boolean result = false;
		result = campService.reviseCampState(campId, campstate);
		out_json.addProperty("msg", result);
		if (result == false) {
			out_json.addProperty("other", "修改状态失败！");
		} else {
			out_json.addProperty("other", "修改状态成功！");
		}
		PrintWriter out = response.getWriter();
		out.println(out_json);
		out.flush();
		out.close();
	}
	/**
	 * 函数名称：getCampSlides
	 *  功能描述：首页轮播
	 *  参数说明：
	 *  返回值： 
	 *  备注：
	 * 
	 * 作者：lujinye 时间：2017年2月21日10:10:04
	 * 
	 * @throws SQLException
	 * @throws IOException
	 */
	public void getCampSlides(MyResquestWrapper request, MyResponseWrapper response) throws SQLException,IOException {
		JsonObject out_json = new JsonObject();
		Camp camp = campService.getCampSlides();
		if(camp!=null) {
			out_json.addProperty("msg",true);
			out_json.add("camp", camp.toJSON());
		}
		else {
			out_json.addProperty("msg",false);
			out_json.add("camp", null);
		}
		PrintWriter out = response.getWriter();
		out.println(out_json);
		out.flush();
		out.close();
	}
	
	public void CampDetailById(MyResquestWrapper request, MyResponseWrapper response) throws IOException {
		int campId = Integer.parseInt(request.getParameter("campId"));
		JsonObject out_json = new JsonObject();
		Camp camp = campService.Web_getCampDetails(campId);
		out_json = camp.toJSON_add();
		PrintWriter out = response.getWriter();
		out.println(out_json);
		
		out.flush();
		out.close();
	}
	
	/**
	 * 函数名称：getCampbyInfo 
	 * 功能描述：获得营地
	 * 参数说明：营地名，目的地，报名金额
	 * 返回值：camp 备注：
	 * 
	 * 作者：lujinye 时间：2016年7月5日22:31:42
	 */
	public void getCampbyInfo(MyResquestWrapper request, MyResponseWrapper response) throws SQLException, IOException {
		String camp_Name = request.getParameter("camp_Name");
		String camp_Address = request.getParameter("camp_Address");
		int money = Integer.parseInt(request.getParameter("money"));
		String applyReport = request.getParameter("applyorder");
		
		JsonObject out_json = new JsonObject();
		JsonObject jsonData = new JsonObject();

		Camp camp = campService.getCampbyInfo(camp_Name,camp_Address,money);
		if (camp != null) {
			jsonData = camp.toJSON();
			out_json.addProperty("msg", true);
			out_json.add("data", jsonData);
			out_json.addProperty("applyReport",applyReport );
			//out_json.addProperty("state", applyReportState);
		} else {
			out_json.addProperty("msg", false);
			out_json.add("data", null);
		}
		PrintWriter out = response.getWriter();
		out.println(out_json);
		out.flush();
		out.close();
	}
	
	
	/**
	 * 
	 * 函数名称：getApplyList 功能描述：获取报名列表 参数说明： 返回值：void 备注：
	 * 
	 * 作者：joker 时间：2016年7月13日下午8:47:21
	 */
	public void getApplyList(MyResquestWrapper request, MyResponseWrapper response) throws IOException {
		int page = Integer.parseInt(request.getParameter("page"));
		JsonObject out_json = new JsonObject();
		JsonArray jsonData = new JsonArray();
		List<CampApply> campapply = campService.getAllApplyReport(page);
		String total = campService.getApplyReportNum();
		
		for (int i = 0; i < campapply.size(); i++) {
			jsonData.add(campapply.get(i).toJSON());
		}
		out_json.addProperty("total", total);
		out_json.add("rows", jsonData);
		PrintWriter out = response.getWriter();
		out.println(out_json);
		out.flush();
		out.close();
	}
	
	
	public void getCampApplyDetailbackground(MyResquestWrapper request, MyResponseWrapper response) throws IOException {
		String idcard = request.getParameter("idcard");
		String camp_Name = URLDecoder.decode(request.getParameter("camp_Name"), "UTF-8");
		String camp_Address = URLDecoder.decode(request.getParameter("camp_Address"), "UTF-8");
		int camp_Age = Integer.parseInt(request.getParameter("camp_Age"));
		JsonObject jsonData = new JsonObject();
		CampApply campapply = campService.getCampApplyDetailbackground(idcard,camp_Name,camp_Address,camp_Age);
		jsonData = campapply.toJSON();
		PrintWriter out = response.getWriter();
		out.println(jsonData);
		out.flush();
		out.close();
	}
	
	public void search(MyResquestWrapper request, MyResponseWrapper response) throws IOException {
		int page = Integer.parseInt(request.getParameter("page"));
		String starttime = request.getParameter("starttime");
		String endtime = request.getParameter("endtime");
		String options = request.getParameter("options");
		String Info = URLDecoder.decode(request.getParameter("Info"), "UTF-8");
		int orderState = Integer.parseInt(request.getParameter("orderState"));
		JsonObject out_json = new JsonObject();
		JsonArray jsonData = new JsonArray();
		List<CampApply> campapply = campService.getApplyReport(starttime, endtime, options, Info, orderState, page);
		String total = campService.getSearchNum(starttime, endtime, options, Info, orderState);
		for (int i = 0; i < campapply.size(); i++) {
			jsonData.add(campapply.get(i).toJSON());
		}
		out_json.addProperty("total", total);
		out_json.add("rows", jsonData);
		PrintWriter out = response.getWriter();
		out.println(jsonData);
		out.flush();
		out.close();
	}
	
	public void exportCampApply(MyResquestWrapper request, MyResponseWrapper response) throws IOException {
		String starttime = request.getParameter("from");
		String endtime = request.getParameter("to");
		String options = request.getParameter("options");
		String Info =request.getParameter("info");
		
		int orderState = Integer.parseInt(request.getParameter("orderState"));
		JsonObject out_json = new JsonObject();
		JsonArray jsonData = new JsonArray();
		List<CampApply> campapply = campService.exportCampApply(starttime, endtime, options, Info, orderState);
		
		Excel excel = new Excel();
		String str = excel.exportcampExcel(starttime, endtime, options, Info, orderState, campapply);

		
		String ENCODING="utf-8";  
		  
		  
		 //内容类型  
		  
		 String CONTENT_TYPE="text/html;charset=utf-8";  
		  
		  
		 //要下载的文件存放的路径  
		  
		String downloadfiledir="C:/exportfile/";  
		  
		  
		  
		  
		 //设置request对象的字符编码  
		  
		 request.setCharacterEncoding(ENCODING);  
		  
		  
		 //从request中取出要下载文件的名字  
		  
		 String filename = str.substring(str.lastIndexOf("\\") + 1);  
		 if(filename==null||filename.trim().equals("")){  
		  
		 //设置response对象的ContentType  
		  
		 response.setContentType(CONTENT_TYPE);  
		  
		  
		 //输出错误信息  
		  
		 PrintWriter out=response.getWriter();  
		  
		 out.println("<font color=red>文件下载失败！</font>");  
		  
		 out.close();  
		  
		 }else{  
		  
		 //下载文件的完整路径名  
		  
		 String fullfilename=downloadfiledir+filename;  
		  
		 System.out.println("下载文件："+fullfilename);  
		  
		  
		 //根据文件的类型设置response对象的ContentType  
		  
		 String contentType=getServletContext().getMimeType(fullfilename);  
		  
		 if(contentType==null)  {
		 contentType="application/octet-stream";  
		 }
		 response.setContentType(contentType);  
		  
		 //设置response的头信息  
		 //filename="+URLEncoder.encode(fileName, "UTF-8")
		 response.setHeader("Content-disposition","attachment;filename="+URLEncoder.encode(filename, "utf-8"));  
		  
		 InputStream is=null;  
		  
		 OutputStream os=null;  
		  
		  
		 try{  
		  
		 is=new BufferedInputStream(new FileInputStream(fullfilename));  
		  
		  
		 //定义输出字节流  
		  
		 ByteArrayOutputStream baos=new ByteArrayOutputStream();  
		  
		  
		 //定义response的输出流  
		  
		 os=new BufferedOutputStream(response.getOutputStream());  
		  
		  
		 //定义buffer  
		  
		 byte[] buffer=new byte[4*1024]; //4k Buffer  
		  
		 int read=0;  
		  
		  
		 //从文件中读入数据并写到输出字节流中  
		  
		 while((read=is.read(buffer))!=-1){  
		  
		 baos.write(buffer,0,read);  
		  
		 }  
		  
		  
		 //将输出字节流写到response的输出流中  
		  
		 os.write(baos.toByteArray());  
		  
		 }catch(IOException e){  
		  
		 e.printStackTrace();  
		  
		 }finally{  
		  
		 //关闭输出字节流和response输出流  
		  
		 os.close();  
		  
		 is.close();  
		  
		 }  
		 }
	}
	
}


	

